// resources/js/components/timeago.js
function timeago({
  strdate,
  id,
  dateLabel = ["years", "months", "days", "hours", "minutes", "seconds"],
  interval = 1e3,
  prefix = "",
  suffix = ""
}) {
  return {
    strdate,
    dateLabel,
    interval,
    id,
    prefix,
    suffix,
    getTimeAgo() {
      var date1 = /* @__PURE__ */ new Date();
      var date2 = new Date(this.strdate * 1e3);
      let time = date2.getTime() - date1.getTime() < 0 ? false : true, laterDate = time ? date2 : date1, earlierDate = time ? date1 : date2, secondDiff = laterDate.getSeconds() - earlierDate.getSeconds(), minuteDiff = laterDate.getMinutes() - earlierDate.getMinutes(), hourDiff = laterDate.getHours() - earlierDate.getHours(), dayDiff = laterDate.getDate() - earlierDate.getDate(), monthDiff = laterDate.getMonth() - earlierDate.getMonth(), yearDiff = laterDate.getFullYear() - earlierDate.getFullYear(), months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      if (secondDiff < 0) {
        minuteDiff--;
        secondDiff = 60 + secondDiff;
      }
      if (minuteDiff < 0) {
        hourDiff--;
      }
      if (hourDiff < 0) {
        dayDiff--;
      }
      if (dayDiff < 0) {
        monthDiff--;
        dayDiff += months[laterDate.getMonth() - 1];
      }
      if (monthDiff < 0) {
        yearDiff--;
        monthDiff += 12;
      }
      let datestring = "";
      [yearDiff, monthDiff, dayDiff, hourDiff, minuteDiff, secondDiff].forEach((val, i) => {
        if (val > 0) {
          if (datestring != "") {
            datestring += " ";
          }
          datestring += val + this.dateLabel[i];
        }
      });
      if (this.prefix)
        datestring = this.prefix + " " + datestring;
      if (this.suffix)
        datestring = datestring + " " + this.suffix;
      return datestring;
    },
    init() {
      document.getElementById(this.id).innerHTML = this.getTimeAgo();
      setInterval(() => {
        document.getElementById(this.id).innerHTML = this.getTimeAgo();
      }, this.interval);
    }
  };
}
export {
  timeago as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vanMvY29tcG9uZW50cy90aW1lYWdvLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lYWdvKHtcbiAgICBzdHJkYXRlLFxuICAgIGlkLFxuICAgIGRhdGVMYWJlbCA9IFtcInllYXJzXCIsIFwibW9udGhzXCIsIFwiZGF5c1wiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl0sXG4gICAgaW50ZXJ2YWwgPSAxMDAwLFxuICAgIHByZWZpeCA9ICcnLFxuICAgIHN1ZmZpeCA9ICcnLFxufSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0cmRhdGUsXG4gICAgICAgIGRhdGVMYWJlbCxcbiAgICAgICAgaW50ZXJ2YWwsXG4gICAgICAgIGlkLFxuICAgICAgICBwcmVmaXgsXG4gICAgICAgIHN1ZmZpeCxcbiAgICAgICAgZ2V0VGltZUFnbygpIHtcbiAgICAgICAgICAgIHZhciBkYXRlMSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB2YXIgZGF0ZTIgPSBuZXcgRGF0ZSh0aGlzLnN0cmRhdGUgKiAxMDAwKVxuXG4gICAgICAgICAgICBsZXQgdGltZSA9IChkYXRlMi5nZXRUaW1lKCkgLSBkYXRlMS5nZXRUaW1lKCkpIDwgMCA/IGZhbHNlIDogdHJ1ZSwgLy8gd29yayBvdXQgd2hpY2ggaXMgdGhlIGxhdGVyIGRhdGVcbiAgICAgICAgICAgICAgICBsYXRlckRhdGUgPSB0aW1lID8gZGF0ZTIgOiBkYXRlMSxcbiAgICAgICAgICAgICAgICBlYXJsaWVyRGF0ZSA9IHRpbWUgPyBkYXRlMSA6IGRhdGUyLFxuICAgICAgICAgICAgICAgIHNlY29uZERpZmYgPSBsYXRlckRhdGUuZ2V0U2Vjb25kcygpIC0gZWFybGllckRhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICAgICAgICAgIG1pbnV0ZURpZmYgPSBsYXRlckRhdGUuZ2V0TWludXRlcygpIC0gZWFybGllckRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgICAgICAgIGhvdXJEaWZmID0gbGF0ZXJEYXRlLmdldEhvdXJzKCkgLSBlYXJsaWVyRGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgICAgIGRheURpZmYgPSBsYXRlckRhdGUuZ2V0RGF0ZSgpIC0gZWFybGllckRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgICAgICAgICAgIG1vbnRoRGlmZiA9IGxhdGVyRGF0ZS5nZXRNb250aCgpIC0gZWFybGllckRhdGUuZ2V0TW9udGgoKSwgLy8gamF2YXNjcmlwdCB1c2VzIHplcm8taW5kZXhlZCBtb250aHMgKDAtMTEgcmF0aGVyIHRoYW4gdGhlIG1vcmUgY29udmVudGlvbmFsIDEtMTIpXG4gICAgICAgICAgICAgICAgeWVhckRpZmYgPSBsYXRlckRhdGUuZ2V0RnVsbFllYXIoKSAtIGVhcmxpZXJEYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgbW9udGhzID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuXG5cbiAgICAgICAgICAgIGlmIChzZWNvbmREaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgIG1pbnV0ZURpZmYtLTtcbiAgICAgICAgICAgICAgICBzZWNvbmREaWZmID0gNjAgKyBzZWNvbmREaWZmXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtaW51dGVEaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgIGhvdXJEaWZmLS07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChob3VyRGlmZiA8IDApIHtcbiAgICAgICAgICAgICAgICBkYXlEaWZmLS07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXlEaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgIG1vbnRoRGlmZi0tO1xuICAgICAgICAgICAgICAgIGRheURpZmYgKz0gbW9udGhzW2xhdGVyRGF0ZS5nZXRNb250aCgpIC0gMV07IC8vIC0xIGJlY2F1c2Ugd2Ugd2FudCB0aGUgcHJldmlvdXMgbW9udGhcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vbnRoRGlmZiA8IDApIHtcbiAgICAgICAgICAgICAgICB5ZWFyRGlmZi0tO1xuICAgICAgICAgICAgICAgIG1vbnRoRGlmZiArPSAxMjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGRhdGVzdHJpbmcgPSAnJztcblxuICAgICAgICAgICAgW3llYXJEaWZmLCBtb250aERpZmYsIGRheURpZmYsIGhvdXJEaWZmLCBtaW51dGVEaWZmLCBzZWNvbmREaWZmXS5mb3JFYWNoKCh2YWwsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZXN0cmluZyAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXN0cmluZyArPSAnICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGF0ZXN0cmluZyArPSB2YWwgKyB0aGlzLmRhdGVMYWJlbFtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZih0aGlzLnByZWZpeCkgZGF0ZXN0cmluZyA9IHRoaXMucHJlZml4ICsgJyAnICsgZGF0ZXN0cmluZztcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3VmZml4KSBkYXRlc3RyaW5nID0gZGF0ZXN0cmluZyArICcgJyArIHRoaXMuc3VmZml4O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZGF0ZXN0cmluZztcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdCgpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaWQpLmlubmVySFRNTCA9IHRoaXMuZ2V0VGltZUFnbygpXG4gICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5pZCkuaW5uZXJIVE1MID0gdGhpcy5nZXRUaW1lQWdvKClcbiAgICAgICAgICAgIH0sIHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgfVxufSJdLAogICJtYXBwaW5ncyI6ICI7QUFBZSxTQUFSLFFBQXlCO0FBQUEsRUFDNUI7QUFBQSxFQUNBO0FBQUEsRUFDQSxZQUFZLENBQUMsU0FBUyxVQUFVLFFBQVEsU0FBUyxXQUFXLFNBQVM7QUFBQSxFQUNyRSxXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQ2IsR0FBRztBQUNDLFNBQU87QUFBQSxJQUNIO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBLGFBQWE7QUFDVCxVQUFJLFFBQVEsb0JBQUksS0FBSztBQUNyQixVQUFJLFFBQVEsSUFBSSxLQUFLLEtBQUssVUFBVSxHQUFJO0FBRXhDLFVBQUksT0FBUSxNQUFNLFFBQVEsSUFBSSxNQUFNLFFBQVEsSUFBSyxJQUFJLFFBQVEsTUFDekQsWUFBWSxPQUFPLFFBQVEsT0FDM0IsY0FBYyxPQUFPLFFBQVEsT0FDN0IsYUFBYSxVQUFVLFdBQVcsSUFBSSxZQUFZLFdBQVcsR0FDN0QsYUFBYSxVQUFVLFdBQVcsSUFBSSxZQUFZLFdBQVcsR0FDN0QsV0FBVyxVQUFVLFNBQVMsSUFBSSxZQUFZLFNBQVMsR0FDdkQsVUFBVSxVQUFVLFFBQVEsSUFBSSxZQUFZLFFBQVEsR0FDcEQsWUFBWSxVQUFVLFNBQVMsSUFBSSxZQUFZLFNBQVMsR0FDeEQsV0FBVyxVQUFVLFlBQVksSUFBSSxZQUFZLFlBQVksR0FDN0QsU0FBUyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO0FBRzVELFVBQUksYUFBYSxHQUFHO0FBQ2hCO0FBQ0EscUJBQWEsS0FBSztBQUFBLE1BQ3RCO0FBRUEsVUFBSSxhQUFhLEdBQUc7QUFDaEI7QUFBQSxNQUNKO0FBRUEsVUFBSSxXQUFXLEdBQUc7QUFDZDtBQUFBLE1BQ0o7QUFFQSxVQUFJLFVBQVUsR0FBRztBQUNiO0FBQ0EsbUJBQVcsT0FBTyxVQUFVLFNBQVMsSUFBSSxDQUFDO0FBQUEsTUFDOUM7QUFFQSxVQUFJLFlBQVksR0FBRztBQUNmO0FBQ0EscUJBQWE7QUFBQSxNQUNqQjtBQUVBLFVBQUksYUFBYTtBQUVqQixPQUFDLFVBQVUsV0FBVyxTQUFTLFVBQVUsWUFBWSxVQUFVLEVBQUUsUUFBUSxDQUFDLEtBQUssTUFBTTtBQUNqRixZQUFJLE1BQU0sR0FBRztBQUNULGNBQUksY0FBYyxJQUFJO0FBQ2xCLDBCQUFjO0FBQUEsVUFDbEI7QUFDQSx3QkFBYyxNQUFNLEtBQUssVUFBVSxDQUFDO0FBQUEsUUFDeEM7QUFBQSxNQUNKLENBQUM7QUFFRCxVQUFHLEtBQUs7QUFBUSxxQkFBYSxLQUFLLFNBQVMsTUFBTTtBQUVqRCxVQUFJLEtBQUs7QUFBUSxxQkFBYSxhQUFhLE1BQU0sS0FBSztBQUV0RCxhQUFPO0FBQUEsSUFDWDtBQUFBLElBQ0EsT0FBTztBQUNILGVBQVMsZUFBZSxLQUFLLEVBQUUsRUFBRSxZQUFZLEtBQUssV0FBVztBQUM3RCxrQkFBWSxNQUFNO0FBQ2QsaUJBQVMsZUFBZSxLQUFLLEVBQUUsRUFBRSxZQUFZLEtBQUssV0FBVztBQUFBLE1BQ2pFLEdBQUcsS0FBSyxRQUFRO0FBQUEsSUFDcEI7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
