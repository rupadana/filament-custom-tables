// resources/js/components/timeago.js
function timeago({
  strdate,
  id,
  dateLabel = ["years", "months", "days", "hours", "minutes", "seconds"],
  interval = 1e3
}) {
  return {
    strdate,
    dateLabel,
    interval,
    id,
    getTimeAgo() {
      var date1 = /* @__PURE__ */ new Date();
      var date2 = new Date(this.strdate * 1e3);
      let time = date2.getTime() - date1.getTime() < 0 ? false : true, laterDate = time ? date2 : date1, earlierDate = time ? date1 : date2, secondDiff = laterDate.getSeconds() - earlierDate.getSeconds(), minuteDiff = laterDate.getMinutes() - earlierDate.getMinutes(), hourDiff = laterDate.getHours() - earlierDate.getHours(), dayDiff = laterDate.getDate() - earlierDate.getDate(), monthDiff = laterDate.getMonth() - earlierDate.getMonth(), yearDiff = laterDate.getFullYear() - earlierDate.getFullYear(), months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      if (secondDiff < 0) {
        minuteDiff--;
        secondDiff = 60 + secondDiff;
      }
      if (minuteDiff < 0) {
        hourDiff--;
      }
      if (hourDiff < 0) {
        dayDiff--;
      }
      if (dayDiff < 0) {
        monthDiff--;
        dayDiff += months[laterDate.getMonth() - 1];
      }
      if (monthDiff < 0) {
        yearDiff--;
        monthDiff += 12;
      }
      let datestring = "";
      [yearDiff, monthDiff, dayDiff, hourDiff, minuteDiff, secondDiff].forEach((val, i) => {
        if (val > 0) {
          if (datestring != "") {
            datestring += " ";
          }
          datestring += val + this.dateLabel[i];
        }
      });
      return datestring;
    },
    init() {
      document.getElementById(this.id).innerHTML = this.getTimeAgo();
      setInterval(() => {
        document.getElementById(this.id).innerHTML = this.getTimeAgo();
      }, this.interval);
    }
  };
}
export {
  timeago as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vanMvY29tcG9uZW50cy90aW1lYWdvLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lYWdvKHtcbiAgICBzdHJkYXRlLFxuICAgIGlkLFxuICAgIGRhdGVMYWJlbCA9IFtcInllYXJzXCIsIFwibW9udGhzXCIsIFwiZGF5c1wiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl0sXG4gICAgaW50ZXJ2YWwgPSAxMDAwLFxufSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0cmRhdGUsXG4gICAgICAgIGRhdGVMYWJlbCxcbiAgICAgICAgaW50ZXJ2YWwsXG4gICAgICAgIGlkLFxuICAgICAgICBnZXRUaW1lQWdvKCkge1xuICAgICAgICAgICAgdmFyIGRhdGUxID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHZhciBkYXRlMiA9IG5ldyBEYXRlKHRoaXMuc3RyZGF0ZSAqIDEwMDApXG5cbiAgICAgICAgICAgIGxldCB0aW1lID0gKGRhdGUyLmdldFRpbWUoKSAtIGRhdGUxLmdldFRpbWUoKSkgPCAwID8gZmFsc2UgOiB0cnVlLCAvLyB3b3JrIG91dCB3aGljaCBpcyB0aGUgbGF0ZXIgZGF0ZVxuICAgICAgICAgICAgICAgIGxhdGVyRGF0ZSA9IHRpbWUgPyBkYXRlMiA6IGRhdGUxLFxuICAgICAgICAgICAgICAgIGVhcmxpZXJEYXRlID0gdGltZSA/IGRhdGUxIDogZGF0ZTIsXG4gICAgICAgICAgICAgICAgc2Vjb25kRGlmZiA9IGxhdGVyRGF0ZS5nZXRTZWNvbmRzKCkgLSBlYXJsaWVyRGF0ZS5nZXRTZWNvbmRzKCksXG4gICAgICAgICAgICAgICAgbWludXRlRGlmZiA9IGxhdGVyRGF0ZS5nZXRNaW51dGVzKCkgLSBlYXJsaWVyRGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICAgICAgICAgICAgaG91ckRpZmYgPSBsYXRlckRhdGUuZ2V0SG91cnMoKSAtIGVhcmxpZXJEYXRlLmdldEhvdXJzKCksXG4gICAgICAgICAgICAgICAgZGF5RGlmZiA9IGxhdGVyRGF0ZS5nZXREYXRlKCkgLSBlYXJsaWVyRGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICAgICAgbW9udGhEaWZmID0gbGF0ZXJEYXRlLmdldE1vbnRoKCkgLSBlYXJsaWVyRGF0ZS5nZXRNb250aCgpLCAvLyBqYXZhc2NyaXB0IHVzZXMgemVyby1pbmRleGVkIG1vbnRocyAoMC0xMSByYXRoZXIgdGhhbiB0aGUgbW9yZSBjb252ZW50aW9uYWwgMS0xMilcbiAgICAgICAgICAgICAgICB5ZWFyRGlmZiA9IGxhdGVyRGF0ZS5nZXRGdWxsWWVhcigpIC0gZWFybGllckRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICBtb250aHMgPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5cblxuICAgICAgICAgICAgaWYgKHNlY29uZERpZmYgPCAwKSB7XG4gICAgICAgICAgICAgICAgbWludXRlRGlmZi0tO1xuICAgICAgICAgICAgICAgIHNlY29uZERpZmYgPSA2MCArIHNlY29uZERpZmZcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1pbnV0ZURpZmYgPCAwKSB7XG4gICAgICAgICAgICAgICAgaG91ckRpZmYtLTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhvdXJEaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgIGRheURpZmYtLTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRheURpZmYgPCAwKSB7XG4gICAgICAgICAgICAgICAgbW9udGhEaWZmLS07XG4gICAgICAgICAgICAgICAgZGF5RGlmZiArPSBtb250aHNbbGF0ZXJEYXRlLmdldE1vbnRoKCkgLSAxXTsgLy8gLTEgYmVjYXVzZSB3ZSB3YW50IHRoZSBwcmV2aW91cyBtb250aFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9udGhEaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgIHllYXJEaWZmLS07XG4gICAgICAgICAgICAgICAgbW9udGhEaWZmICs9IDEyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGF0ZXN0cmluZyA9ICcnO1xuXG4gICAgICAgICAgICBbeWVhckRpZmYsIG1vbnRoRGlmZiwgZGF5RGlmZiwgaG91ckRpZmYsIG1pbnV0ZURpZmYsIHNlY29uZERpZmZdLmZvckVhY2goKHZhbCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWwgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlc3RyaW5nICE9ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlc3RyaW5nICs9ICcgJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRhdGVzdHJpbmcgKz0gdmFsICsgdGhpcy5kYXRlTGFiZWxbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmV0dXJuIGRhdGVzdHJpbmc7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKS5pbm5lckhUTUwgPSB0aGlzLmdldFRpbWVBZ28oKVxuICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaWQpLmlubmVySFRNTCA9IHRoaXMuZ2V0VGltZUFnbygpXG4gICAgICAgICAgICB9LCB0aGlzLmludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixRQUF5QjtBQUFBLEVBQzVCO0FBQUEsRUFDQTtBQUFBLEVBQ0EsWUFBWSxDQUFDLFNBQVMsVUFBVSxRQUFRLFNBQVMsV0FBVyxTQUFTO0FBQUEsRUFDckUsV0FBVztBQUNmLEdBQUc7QUFDQyxTQUFPO0FBQUEsSUFDSDtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0EsYUFBYTtBQUNULFVBQUksUUFBUSxvQkFBSSxLQUFLO0FBQ3JCLFVBQUksUUFBUSxJQUFJLEtBQUssS0FBSyxVQUFVLEdBQUk7QUFFeEMsVUFBSSxPQUFRLE1BQU0sUUFBUSxJQUFJLE1BQU0sUUFBUSxJQUFLLElBQUksUUFBUSxNQUN6RCxZQUFZLE9BQU8sUUFBUSxPQUMzQixjQUFjLE9BQU8sUUFBUSxPQUM3QixhQUFhLFVBQVUsV0FBVyxJQUFJLFlBQVksV0FBVyxHQUM3RCxhQUFhLFVBQVUsV0FBVyxJQUFJLFlBQVksV0FBVyxHQUM3RCxXQUFXLFVBQVUsU0FBUyxJQUFJLFlBQVksU0FBUyxHQUN2RCxVQUFVLFVBQVUsUUFBUSxJQUFJLFlBQVksUUFBUSxHQUNwRCxZQUFZLFVBQVUsU0FBUyxJQUFJLFlBQVksU0FBUyxHQUN4RCxXQUFXLFVBQVUsWUFBWSxJQUFJLFlBQVksWUFBWSxHQUM3RCxTQUFTLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7QUFHNUQsVUFBSSxhQUFhLEdBQUc7QUFDaEI7QUFDQSxxQkFBYSxLQUFLO0FBQUEsTUFDdEI7QUFFQSxVQUFJLGFBQWEsR0FBRztBQUNoQjtBQUFBLE1BQ0o7QUFFQSxVQUFJLFdBQVcsR0FBRztBQUNkO0FBQUEsTUFDSjtBQUVBLFVBQUksVUFBVSxHQUFHO0FBQ2I7QUFDQSxtQkFBVyxPQUFPLFVBQVUsU0FBUyxJQUFJLENBQUM7QUFBQSxNQUM5QztBQUVBLFVBQUksWUFBWSxHQUFHO0FBQ2Y7QUFDQSxxQkFBYTtBQUFBLE1BQ2pCO0FBRUEsVUFBSSxhQUFhO0FBRWpCLE9BQUMsVUFBVSxXQUFXLFNBQVMsVUFBVSxZQUFZLFVBQVUsRUFBRSxRQUFRLENBQUMsS0FBSyxNQUFNO0FBQ2pGLFlBQUksTUFBTSxHQUFHO0FBQ1QsY0FBSSxjQUFjLElBQUk7QUFDbEIsMEJBQWM7QUFBQSxVQUNsQjtBQUVBLHdCQUFjLE1BQU0sS0FBSyxVQUFVLENBQUM7QUFBQSxRQUN4QztBQUFBLE1BQ0osQ0FBQztBQUVELGFBQU87QUFBQSxJQUNYO0FBQUEsSUFDQSxPQUFPO0FBQ0gsZUFBUyxlQUFlLEtBQUssRUFBRSxFQUFFLFlBQVksS0FBSyxXQUFXO0FBQzdELGtCQUFZLE1BQU07QUFDZCxpQkFBUyxlQUFlLEtBQUssRUFBRSxFQUFFLFlBQVksS0FBSyxXQUFXO0FBQUEsTUFDakUsR0FBRyxLQUFLLFFBQVE7QUFBQSxJQUNwQjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
