// resources/js/components/timeago.js
function timeago({
  strdate,
  id,
  dateLabel = ["years", "months", "days", "hours", "minutes", "seconds"],
  interval = 1e3,
  prefix = "",
  suffix = ""
}) {
  return {
    strdate,
    dateLabel,
    interval,
    id,
    prefix,
    suffix,
    getTimeAgo() {
      var date1 = /* @__PURE__ */ new Date();
      var date2 = new Date(this.strdate * 1e3);
      let time = date2.getTime() - date1.getTime() < 0 ? false : true, laterDate = time ? date2 : date1, earlierDate = time ? date1 : date2, secondDiff = laterDate.getSeconds() - earlierDate.getSeconds(), minuteDiff = laterDate.getMinutes() - earlierDate.getMinutes(), hourDiff = laterDate.getHours() - earlierDate.getHours(), dayDiff = laterDate.getDate() - earlierDate.getDate(), monthDiff = laterDate.getMonth() - earlierDate.getMonth(), yearDiff = laterDate.getFullYear() - earlierDate.getFullYear(), months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      if (secondDiff < 0) {
        minuteDiff--;
        secondDiff = 60 + secondDiff;
      }
      if (minuteDiff < 0) {
        hourDiff--;
        minuteDiff = 60 + minuteDiff;
      }
      if (hourDiff < 0) {
        dayDiff--;
        hourDiff = 24 + hourDiff;
      }
      if (dayDiff < 0) {
        monthDiff--;
        dayDiff += months[laterDate.getMonth() - 1];
      }
      if (monthDiff < 0) {
        yearDiff--;
        monthDiff += 12;
      }
      let datestring = "";
      [yearDiff, monthDiff, dayDiff, hourDiff, minuteDiff, secondDiff].forEach((val, i) => {
        if (val > 0) {
          if (datestring != "") {
            datestring += " ";
          }
          datestring += val + this.dateLabel[i];
        }
      });
      if (this.prefix)
        datestring = this.prefix + " " + datestring;
      if (this.suffix)
        datestring = datestring + " " + this.suffix;
      return datestring;
    },
    init() {
      document.getElementById(this.id).innerHTML = this.getTimeAgo();
      setInterval(() => {
        document.getElementById(this.id).innerHTML = this.getTimeAgo();
      }, this.interval);
    }
  };
}
export {
  timeago as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vanMvY29tcG9uZW50cy90aW1lYWdvLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lYWdvKHtcbiAgICBzdHJkYXRlLFxuICAgIGlkLFxuICAgIGRhdGVMYWJlbCA9IFtcInllYXJzXCIsIFwibW9udGhzXCIsIFwiZGF5c1wiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl0sXG4gICAgaW50ZXJ2YWwgPSAxMDAwLFxuICAgIHByZWZpeCA9ICcnLFxuICAgIHN1ZmZpeCA9ICcnLFxufSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0cmRhdGUsXG4gICAgICAgIGRhdGVMYWJlbCxcbiAgICAgICAgaW50ZXJ2YWwsXG4gICAgICAgIGlkLFxuICAgICAgICBwcmVmaXgsXG4gICAgICAgIHN1ZmZpeCxcbiAgICAgICAgZ2V0VGltZUFnbygpIHtcbiAgICAgICAgICAgIHZhciBkYXRlMSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB2YXIgZGF0ZTIgPSBuZXcgRGF0ZSh0aGlzLnN0cmRhdGUgKiAxMDAwKVxuXG4gICAgICAgICAgICBsZXQgdGltZSA9IChkYXRlMi5nZXRUaW1lKCkgLSBkYXRlMS5nZXRUaW1lKCkpIDwgMCA/IGZhbHNlIDogdHJ1ZSwgLy8gd29yayBvdXQgd2hpY2ggaXMgdGhlIGxhdGVyIGRhdGVcbiAgICAgICAgICAgICAgICBsYXRlckRhdGUgPSB0aW1lID8gZGF0ZTIgOiBkYXRlMSxcbiAgICAgICAgICAgICAgICBlYXJsaWVyRGF0ZSA9IHRpbWUgPyBkYXRlMSA6IGRhdGUyLFxuICAgICAgICAgICAgICAgIHNlY29uZERpZmYgPSBsYXRlckRhdGUuZ2V0U2Vjb25kcygpIC0gZWFybGllckRhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICAgICAgICAgIG1pbnV0ZURpZmYgPSBsYXRlckRhdGUuZ2V0TWludXRlcygpIC0gZWFybGllckRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgICAgICAgIGhvdXJEaWZmID0gbGF0ZXJEYXRlLmdldEhvdXJzKCkgLSBlYXJsaWVyRGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgICAgIGRheURpZmYgPSBsYXRlckRhdGUuZ2V0RGF0ZSgpIC0gZWFybGllckRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgICAgICAgICAgIG1vbnRoRGlmZiA9IGxhdGVyRGF0ZS5nZXRNb250aCgpIC0gZWFybGllckRhdGUuZ2V0TW9udGgoKSwgLy8gamF2YXNjcmlwdCB1c2VzIHplcm8taW5kZXhlZCBtb250aHMgKDAtMTEgcmF0aGVyIHRoYW4gdGhlIG1vcmUgY29udmVudGlvbmFsIDEtMTIpXG4gICAgICAgICAgICAgICAgeWVhckRpZmYgPSBsYXRlckRhdGUuZ2V0RnVsbFllYXIoKSAtIGVhcmxpZXJEYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgbW9udGhzID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuXG5cbiAgICAgICAgICAgIGlmIChzZWNvbmREaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgIG1pbnV0ZURpZmYtLTtcbiAgICAgICAgICAgICAgICBzZWNvbmREaWZmID0gNjAgKyBzZWNvbmREaWZmXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtaW51dGVEaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgIGhvdXJEaWZmLS07XG4gICAgICAgICAgICAgICAgbWludXRlRGlmZiA9IDYwICsgbWludXRlRGlmZlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaG91ckRpZmYgPCAwKSB7XG4gICAgICAgICAgICAgICAgZGF5RGlmZi0tO1xuICAgICAgICAgICAgICAgIGhvdXJEaWZmID0gMjQgKyBob3VyRGlmZlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF5RGlmZiA8IDApIHtcbiAgICAgICAgICAgICAgICBtb250aERpZmYtLTtcbiAgICAgICAgICAgICAgICBkYXlEaWZmICs9IG1vbnRoc1tsYXRlckRhdGUuZ2V0TW9udGgoKSAtIDFdOyAvLyAtMSBiZWNhdXNlIHdlIHdhbnQgdGhlIHByZXZpb3VzIG1vbnRoXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb250aERpZmYgPCAwKSB7XG4gICAgICAgICAgICAgICAgeWVhckRpZmYtLTtcbiAgICAgICAgICAgICAgICBtb250aERpZmYgKz0gMTI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBkYXRlc3RyaW5nID0gJyc7XG5cbiAgICAgICAgICAgIFt5ZWFyRGlmZiwgbW9udGhEaWZmLCBkYXlEaWZmLCBob3VyRGlmZiwgbWludXRlRGlmZiwgc2Vjb25kRGlmZl0uZm9yRWFjaCgodmFsLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVzdHJpbmcgIT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzdHJpbmcgKz0gJyAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGVzdHJpbmcgKz0gdmFsICsgdGhpcy5kYXRlTGFiZWxbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgaWYodGhpcy5wcmVmaXgpIGRhdGVzdHJpbmcgPSB0aGlzLnByZWZpeCArICcgJyArIGRhdGVzdHJpbmc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnN1ZmZpeCkgZGF0ZXN0cmluZyA9IGRhdGVzdHJpbmcgKyAnICcgKyB0aGlzLnN1ZmZpeDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGRhdGVzdHJpbmc7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKS5pbm5lckhUTUwgPSB0aGlzLmdldFRpbWVBZ28oKVxuICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaWQpLmlubmVySFRNTCA9IHRoaXMuZ2V0VGltZUFnbygpXG4gICAgICAgICAgICB9LCB0aGlzLmludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixRQUF5QjtBQUFBLEVBQzVCO0FBQUEsRUFDQTtBQUFBLEVBQ0EsWUFBWSxDQUFDLFNBQVMsVUFBVSxRQUFRLFNBQVMsV0FBVyxTQUFTO0FBQUEsRUFDckUsV0FBVztBQUFBLEVBQ1gsU0FBUztBQUFBLEVBQ1QsU0FBUztBQUNiLEdBQUc7QUFDQyxTQUFPO0FBQUEsSUFDSDtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQSxhQUFhO0FBQ1QsVUFBSSxRQUFRLG9CQUFJLEtBQUs7QUFDckIsVUFBSSxRQUFRLElBQUksS0FBSyxLQUFLLFVBQVUsR0FBSTtBQUV4QyxVQUFJLE9BQVEsTUFBTSxRQUFRLElBQUksTUFBTSxRQUFRLElBQUssSUFBSSxRQUFRLE1BQ3pELFlBQVksT0FBTyxRQUFRLE9BQzNCLGNBQWMsT0FBTyxRQUFRLE9BQzdCLGFBQWEsVUFBVSxXQUFXLElBQUksWUFBWSxXQUFXLEdBQzdELGFBQWEsVUFBVSxXQUFXLElBQUksWUFBWSxXQUFXLEdBQzdELFdBQVcsVUFBVSxTQUFTLElBQUksWUFBWSxTQUFTLEdBQ3ZELFVBQVUsVUFBVSxRQUFRLElBQUksWUFBWSxRQUFRLEdBQ3BELFlBQVksVUFBVSxTQUFTLElBQUksWUFBWSxTQUFTLEdBQ3hELFdBQVcsVUFBVSxZQUFZLElBQUksWUFBWSxZQUFZLEdBQzdELFNBQVMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtBQUc1RCxVQUFJLGFBQWEsR0FBRztBQUNoQjtBQUNBLHFCQUFhLEtBQUs7QUFBQSxNQUN0QjtBQUVBLFVBQUksYUFBYSxHQUFHO0FBQ2hCO0FBQ0EscUJBQWEsS0FBSztBQUFBLE1BQ3RCO0FBRUEsVUFBSSxXQUFXLEdBQUc7QUFDZDtBQUNBLG1CQUFXLEtBQUs7QUFBQSxNQUNwQjtBQUVBLFVBQUksVUFBVSxHQUFHO0FBQ2I7QUFDQSxtQkFBVyxPQUFPLFVBQVUsU0FBUyxJQUFJLENBQUM7QUFBQSxNQUM5QztBQUVBLFVBQUksWUFBWSxHQUFHO0FBQ2Y7QUFDQSxxQkFBYTtBQUFBLE1BQ2pCO0FBRUEsVUFBSSxhQUFhO0FBRWpCLE9BQUMsVUFBVSxXQUFXLFNBQVMsVUFBVSxZQUFZLFVBQVUsRUFBRSxRQUFRLENBQUMsS0FBSyxNQUFNO0FBQ2pGLFlBQUksTUFBTSxHQUFHO0FBQ1QsY0FBSSxjQUFjLElBQUk7QUFDbEIsMEJBQWM7QUFBQSxVQUNsQjtBQUNBLHdCQUFjLE1BQU0sS0FBSyxVQUFVLENBQUM7QUFBQSxRQUN4QztBQUFBLE1BQ0osQ0FBQztBQUVELFVBQUcsS0FBSztBQUFRLHFCQUFhLEtBQUssU0FBUyxNQUFNO0FBRWpELFVBQUksS0FBSztBQUFRLHFCQUFhLGFBQWEsTUFBTSxLQUFLO0FBRXRELGFBQU87QUFBQSxJQUNYO0FBQUEsSUFDQSxPQUFPO0FBQ0gsZUFBUyxlQUFlLEtBQUssRUFBRSxFQUFFLFlBQVksS0FBSyxXQUFXO0FBQzdELGtCQUFZLE1BQU07QUFDZCxpQkFBUyxlQUFlLEtBQUssRUFBRSxFQUFFLFlBQVksS0FBSyxXQUFXO0FBQUEsTUFDakUsR0FBRyxLQUFLLFFBQVE7QUFBQSxJQUNwQjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
